TODO
====

- create SnapshotTransmit from latest COMMITTED log entry, not latest APPLIED log entry

- leader always commit empty log entry at the start of each term?
    - avoids problem where transaction times out because it's log entry
      cannot be committed because previous log entry has older term.

- detached mode
    - when not a member of own ClusterConfig
    - self is not 

- Config changes:
    - cluster UUID
        - persist in k/v store
        - check all incoming messages
    - modes
        - initial unconfigured, empty k/v store
            - may not create cluster
                - sit and wait
                - accept AppendRequest from anyone
            - may create cluster
                - create new UUID
                - commit new ClusterConfig with zero peers
                - become leader
    - include optional ClusterConfig with:
        - LogEntry
        - on-disk files
        - CommitRequest
        - AppendRequest
    - include mandatory ClusterConfig with:
        - k/v store ("last applied config")
    - must accept AppendRequest from non-cluster member
    - must accept RequestVote from non-cluster member
    - if self is not in ClusterConfig
        - don't count own vote in elections
        - don't count self for determining commitIndex
        - accept/handle AppendRequest and RequestVote normally!
        - election timer is still running
        - when ClusterConfig committed, may continue as leader
            - probably will be shutdown soon anyway
    - same transactional logic; new methods added to RaftKVTransaction:
        - addClusterNode()
        - removeClusterNode()
        - wait for commit normally
        - only one at a time of course
    - does ClusterConfig have a non-voting option?
        - non-voting means
            - never leaves follower mode
            - self does not count 

- Cluster UUID

- KVTransaction.setReadOnly() ? 
    - ignore or fail on mutate?

- separate Loggers for:
    - transactions
    - messages (recv & xmit)
    - raft logic

- more memory-efficient Writes class

